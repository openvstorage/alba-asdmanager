--- source/tools/pyrakoon/pyrakoon/nursery.py
+++ source/tools/pyrakoon/pyrakoon/nursery.py
@@ -19,7 +19,6 @@
 #pylint: disable=R0903
 # R0903: Too few public methods

-import logging
 import operator

 try:
@@ -27,10 +26,10 @@
 except ImportError:
     import StringIO

-from pyrakoon import protocol, utils
+from source.tools.pyrakoon.pyrakoon import protocol, utils
+from source.tools.log_handler import LogHandler

-
-LOGGER = logging.getLogger(__name__)
+LOGGER = LogHandler.get('arakoon_client', 'pyrakoon')

 class NurseryConfigType(protocol.Type):
     '''NurseryConfig type'''
--- source/tools/pyrakoon/pyrakoon/protocol/__init__.py
+++ source/tools/pyrakoon/pyrakoon/protocol/__init__.py
@@ -26,8 +26,8 @@
 except ImportError:
     import StringIO

-from pyrakoon import utils
-import pyrakoon.consistency
+from source.tools.pyrakoon.pyrakoon import utils
+import source.tools.pyrakoon.pyrakoon.consistency

 # Result codes
 RESULT_SUCCESS = 0x0000
@@ -302,7 +302,7 @@
     '''Step type'''

     def check(self, value):
-        from pyrakoon import sequence
+        from source.tools.pyrakoon.pyrakoon import sequence

         if not isinstance(value, sequence.Step):
             raise TypeError
@@ -650,18 +650,18 @@
     #pylint: disable=R0912

     def check(self, value):
-        if value is not pyrakoon.consistency.CONSISTENT \
-            and value is not pyrakoon.consistency.INCONSISTENT \
+        if value is not source.tools.pyrakoon.pyrakoon.consistency.CONSISTENT \
+            and value is not source.tools.pyrakoon.pyrakoon.consistency.INCONSISTENT \
             and value is not None \
-            and not isinstance(value, pyrakoon.consistency.AtLeast):
+            and not isinstance(value, source.tools.pyrakoon.pyrakoon.consistency.AtLeast):
             raise ValueError('Invalid `consistency` value')

     def serialize(self, value):
-        if value is pyrakoon.consistency.CONSISTENT or value is None:
+        if value is source.tools.pyrakoon.pyrakoon.consistency.CONSISTENT or value is None:
             yield '\0'
-        elif value is pyrakoon.consistency.INCONSISTENT:
+        elif value is source.tools.pyrakoon.pyrakoon.consistency.INCONSISTENT:
             yield '\1'
-        elif isinstance(value, pyrakoon.consistency.AtLeast):
+        elif isinstance(value, source.tools.pyrakoon.pyrakoon.consistency.AtLeast):
             yield '\2'
             for data in INT64.serialize(value.i):
                 yield data
@@ -680,9 +680,9 @@
             raise TypeError

         if request.value == 0:
-            yield Result(pyrakoon.consistency.CONSISTENT)
+            yield Result(source.tools.pyrakoon.pyrakoon.consistency.CONSISTENT)
         elif request.value == 1:
-            yield Result(pyrakoon.consistency.INCONSISTENT)
+            yield Result(source.tools.pyrakoon.pyrakoon.consistency.INCONSISTENT)
         elif request.value == 2:
             i_receiver = INT64.receive()
             request = i_receiver.next()
@@ -694,7 +694,7 @@
             if not isinstance(request, Result):
                 raise TypeError

-            yield Result(pyrakoon.consistency.AtLeast(request.value))
+            yield Result(source.tools.pyrakoon.pyrakoon.consistency.AtLeast(request.value))
         else:
             raise ValueError('Unknown consistency tag \'%d\'' % request.value)

@@ -766,7 +766,7 @@
         :see: :func:`pyrakoon.utils.process_blocking`
         '''

-        from pyrakoon import errors
+        from source.tools.pyrakoon.pyrakoon import errors

         code_receiver = UINT32.receive()
         request = code_receiver.next() #pylint: disable=E1101
@@ -1092,7 +1092,7 @@
     ''')

     def __init__(self, steps, sync):
-        from pyrakoon import sequence
+        from source.tools.pyrakoon.pyrakoon import sequence

         super(Sequence, self).__init__()

--- source/tools/pyrakoon/pyrakoon/test.py
+++ source/tools/pyrakoon/pyrakoon/test.py
@@ -20,7 +20,6 @@
 import time
 import shutil
 import struct
-import logging
 import tempfile
 import subprocess

@@ -29,10 +28,10 @@
 except ImportError:
     import StringIO

-from pyrakoon import client, compat, errors, protocol, utils
+from source.tools.pyrakoon.pyrakoon import client, compat, errors, protocol, utils
+from source.tools.log_handler import LogHandler

-
-LOGGER = logging.getLogger(__name__)
+LOGGER = LogHandler.get('arakoon_client', 'pyrakoon')

 #pylint: disable=R0904
 class FakeClient(object, client.AbstractClient, client.ClientMixin):
===================================================================
--- source/tools/pyrakoon/pyrakoon/client/admin.py
+++ source/tools/pyrakoon/pyrakoon/client/admin.py
@@ -16,8 +16,8 @@

 '''Administrative client interface'''

-from pyrakoon.client import utils
-from pyrakoon.protocol import admin
+from source.tools.pyrakoon.pyrakoon.client import utils
+from source.tools.pyrakoon.pyrakoon.protocol import admin

 class ClientMixin: #pylint: disable=W0232,C1001
     '''Mixin providing client actions for node administration
--- source/tools/pyrakoon/pyrakoon/utils.py
+++ source/tools/pyrakoon/pyrakoon/utils.py
@@ -18,11 +18,11 @@

 import __builtin__
 import uuid
-import logging
 import functools
 import itertools
+from source.tools.log_handler import LogHandler

-LOGGER = logging.getLogger(__name__)
+LOGGER = LogHandler.get('arakoon_client', 'pyrakoon')
 '''Logger for code in this module''' #pylint: disable=W0105


@@ -334,7 +334,7 @@
     :see: :meth:`pyrakoon.protocol.Message.receive`
     '''

-    from pyrakoon import protocol
+    from source.tools.pyrakoon.pyrakoon import protocol

     request = receiver.next()

--- source/tools/pyrakoon/pyrakoon/sequence.py
+++ source/tools/pyrakoon/pyrakoon/sequence.py
@@ -18,7 +18,7 @@

 import operator

-from pyrakoon import protocol, utils
+from source.tools.pyrakoon.pyrakoon import protocol, utils

 #pylint: disable=R0903

--- source/tools/pyrakoon/pyrakoon/client/utils.py
+++ source/tools/pyrakoon/pyrakoon/client/utils.py
@@ -18,7 +18,7 @@

 import functools

-from pyrakoon import protocol, utils
+from source.tools.pyrakoon.pyrakoon import protocol, utils

 def validate_types(specs, args):
     '''Validate method call argument types
@@ -88,7 +88,7 @@
             self = kwargs['self']

             if not self.connected:
-                from pyrakoon import client
+                from source.tools.pyrakoon.pyrakoon import client
                 raise client.NotConnectedError('Not connected')

             args = tuple(kwargs[arg[0]] for arg in message_type.ARGS)
--- source/tools/pyrakoon/pyrakoon/client/__init__.py
+++ source/tools/pyrakoon/pyrakoon/client/__init__.py
@@ -16,9 +16,9 @@

 '''Arakoon client interface'''

-from pyrakoon import errors, protocol
-import pyrakoon.utils
-from pyrakoon.client.utils import call
+from source.tools.pyrakoon.pyrakoon import errors, protocol
+import source.tools.pyrakoon.pyrakoon.utils
+from source.tools.pyrakoon.pyrakoon.client.utils import call

 class ClientMixin: #pylint: disable=W0232,R0904,old-style-class
     '''Mixin providing client actions for standard cluster functionality
@@ -238,7 +238,7 @@
             for part in message.serialize():
                 self._socket.sendall(part)

-            return pyrakoon.utils.read_blocking(
+            return source.tools.pyrakoon.pyrakoon.utils.read_blocking(
                 message.receive(), self._socket.recv)
         except Exception as exc:
             if not isinstance(exc, errors.ArakoonError):
--- source/tools/pyrakoon/pyrakoon/protocol/admin.py
+++ source/tools/pyrakoon/pyrakoon/protocol/admin.py
@@ -18,7 +18,7 @@

 import operator

-from pyrakoon import errors, protocol, utils
+from source.tools.pyrakoon.pyrakoon import errors, protocol, utils

 class OptimizeDB(protocol.Message):
     '''"optimize_db" message'''
--- source/tools/pyrakoon/pyrakoon/compat.py
+++ source/tools/pyrakoon/pyrakoon/compat.py
@@ -21,14 +21,14 @@
 import random
 import select
 import socket
-import logging
 import functools
 import threading
 import inspect
 import operator
 import ssl

-from pyrakoon import client, consistency, errors, protocol, sequence, utils
+from source.tools.pyrakoon.pyrakoon import client, consistency, errors, protocol, sequence, utils
+from source.tools.log_handler import LogHandler

 __docformat__ = 'epytext'

@@ -52,22 +52,7 @@
 # E1121: Too many positional arguments for function call
 # R0904: Too many public methods

-LOGGER = logging.getLogger(__name__)
-
-def _add_handler():
-    if hasattr(logging, 'NullHandler'):
-        handler = logging.NullHandler() #pylint: disable=E1101
-    else:
-        class NullHandler(logging.Handler):
-            def emit(self, record):
-                pass
-
-        handler = NullHandler()
-
-    LOGGER.addHandler(handler)
-
-_add_handler()
-del _add_handler
+LOGGER = LogHandler.get('arakoon_client', 'pyrakoon')

 class Consistency:
     pass
--- source/tools/pyrakoon/pyrakoon/tx.py
+++ source/tools/pyrakoon/pyrakoon/tx.py
@@ -26,7 +26,7 @@
 from twisted.protocols import basic, stateful
 from twisted.python import log

-from pyrakoon import client, errors, protocol, utils
+from source.tools.pyrakoon.pyrakoon import client, errors, protocol, utils

 #pylint: disable=R0904,C0103,R0901
